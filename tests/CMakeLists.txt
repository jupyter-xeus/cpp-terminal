if(CMAKE_CXX_COMPILER_ID STREQUAL "GNU" AND CMAKE_CXX_COMPILER_VERSION VERSION_GREATER_EQUAL 4.7.0 AND CMAKE_CXX_COMPILER_VERSION VERSION_LESS 4.7.9)
  return()
endif()

if(CMAKE_VERSION GREATER_EQUAL 3.11)
  include(FetchContent)
  FetchContent_Declare(doctest GIT_REPOSITORY https://github.com/doctest/doctest.git GIT_TAG v2.4.9)
  FetchContent_GetProperties(doctest)
  if(NOT doctest_POPULATED)
    set(DOCTEST_NO_INSTALL  TRUE)
    FetchContent_Populate(doctest)
    add_subdirectory("${doctest_SOURCE_DIR}" "${doctest_BINARY_DIR}")
    include("${doctest_SOURCE_DIR}/scripts/cmake/doctest.cmake")
    unset(DOCTEST_NO_INSTALL)
  endif()
else()
  find_package(doctest QUIET)
  if(NOT doctest_FOUND)
    message(WARNING "CMake is too old to use FetchContent and doctest is not found !\nSkipping tests !")
    return()
  endif()
  include(doctest)
endif()

# Function to create test executables
function(cppterminal_test )
  cmake_parse_arguments(ARG "" "SOURCE" "" ${ARGN})
  add_executable("${ARG_SOURCE}.test" "${ARG_SOURCE}.test.cpp")
  target_link_libraries("${ARG_SOURCE}.test" PRIVATE doctest::doctest cpp-terminal::cpp-terminal)
  doctest_discover_tests("${ARG_SOURCE}.test")
endfunction()

cppterminal_test(SOURCE file)
cppterminal_test(SOURCE key)
cppterminal_test(SOURCE screen)
cppterminal_test(SOURCE events)
cppterminal_test(SOURCE exception)
cppterminal_test(SOURCE unicode)
cppterminal_test(SOURCE options)
cppterminal_test(SOURCE version)

if (NOT MINGW AND NOT MSYS)
add_executable(Args args.test.cpp)
target_link_libraries(Args PRIVATE doctest::doctest cpp-terminal::cpp-terminal)
doctest_discover_tests(Args EXTRA_ARGS Bonjour Hello 你好)
endif()
